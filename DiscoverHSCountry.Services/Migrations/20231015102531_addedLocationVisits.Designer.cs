// <auto-generated />
using System;
using DiscoverHSCountry.Services.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DiscoverHSCountry.Services.Migrations
{
    [DbContext(typeof(DiscoverHSCountryContext))]
    [Migration("20231015102531_addedLocationVisits")]
    partial class addedLocationVisits
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.Administrator", b =>
                {
                    b.Property<int>("AdministratorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("administrator_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdministratorId"));

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("AdministratorId")
                        .HasName("PK__Administ__3871E7ACD9FAD8E6");

                    b.HasIndex(new[] { "UserId" }, "IX_Administrator_user_id");

                    b.ToTable("Administrator", (string)null);
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("CoverImage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cover_image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("name");

                    b.HasKey("CityId")
                        .HasName("PK__City__031491A81E493080");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("address");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<int?>("EventCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("event_category_id");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("start_time");

                    b.Property<decimal?>("TicketCost")
                        .HasColumnType("money")
                        .HasColumnName("ticket_cost");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.HasKey("EventId")
                        .HasName("PK__Event__2370F727CA0FAF35");

                    b.HasIndex(new[] { "CityId" }, "IX_Event_city_id");

                    b.HasIndex(new[] { "EventCategoryId" }, "IX_Event_event_category_id");

                    b.ToTable("Event", (string)null);
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.EventCategory", b =>
                {
                    b.Property<int>("EventCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("event_category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventCategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("category_name");

                    b.HasKey("EventCategoryId")
                        .HasName("PK__EventCat__5798ECFF60776307");

                    b.ToTable("EventCategory", (string)null);
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.EventLocation", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.HasKey("EventId")
                        .HasName("PK__Event_Lo__2370F7279BAEF639");

                    b.HasIndex(new[] { "LocationId" }, "IX_Event_Location_location_id");

                    b.ToTable("Event_Location", (string)null);
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.HistoricalEvent", b =>
                {
                    b.Property<int>("HistoricalEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("historical_event_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoricalEventId"));

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<string>("CoverImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cover_image");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.HasKey("HistoricalEventId")
                        .HasName("PK__Historic__6D7C1E04AF2D9D32");

                    b.HasIndex(new[] { "CityId" }, "IX_HistoricalEvent_city_id");

                    b.ToTable("HistoricalEvent", (string)null);
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("address");

                    b.Property<string>("BookingUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<string>("CoverImage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cover_image");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstagramUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsApproved")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<int?>("LocationCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("location_category_id");

                    b.Property<int?>("LocationSubcategoryId")
                        .HasColumnType("int")
                        .HasColumnName("location_subcategory_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("LocationId")
                        .HasName("PK__Location__771831EA98F9947F");

                    b.HasIndex(new[] { "CityId" }, "IX_Location_city_id");

                    b.HasIndex(new[] { "LocationCategoryId" }, "IX_Location_location_category_id");

                    b.HasIndex(new[] { "LocationSubcategoryId" }, "IX_Location_location_subcategory_id");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.LocationCategory", b =>
                {
                    b.Property<int>("LocationCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("location_category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationCategoryId"));

                    b.Property<string>("CoverImage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cover_image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("LocationCategoryId")
                        .HasName("PK__Location__AC3621E3ADC72209");

                    b.ToTable("LocationCategory", (string)null);
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.LocationImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("image_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.HasKey("ImageId")
                        .HasName("PK__Location__DC9AC955E88B92D6");

                    b.HasIndex(new[] { "LocationId" }, "IX_LocationImage_location_id");

                    b.ToTable("LocationImage", (string)null);
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.LocationSubcategory", b =>
                {
                    b.Property<int>("LocationSubcategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("location_subcategory_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationSubcategoryId"));

                    b.Property<string>("CoverImage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cover_image");

                    b.Property<int?>("LocationCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("location_category_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("LocationSubcategoryId")
                        .HasName("PK__Location__419D810A25618620");

                    b.HasIndex(new[] { "LocationCategoryId" }, "IX_LocationSubcategory_location_category_id");

                    b.ToTable("LocationSubcategory", (string)null);
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.LocationTouristAttractionOwner", b =>
                {
                    b.Property<int>("LocationTouristAttractionOwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("location_tourist_attraction_owner_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationTouristAttractionOwnerId"));

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<int?>("TouristAttractionOwnerId")
                        .HasColumnType("int")
                        .HasColumnName("tourist_attraction_owner_id");

                    b.HasKey("LocationTouristAttractionOwnerId")
                        .HasName("PK__Location__2F4C1BA510E7EF02");

                    b.HasIndex(new[] { "LocationId" }, "IX_Location_TouristAttractionOwner_location_id");

                    b.HasIndex(new[] { "TouristAttractionOwnerId" }, "IX_Location_TouristAttractionOwner_tourist_attraction_owner_id");

                    b.ToTable("Location_TouristAttractionOwner", (string)null);
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.LocationVisits", b =>
                {
                    b.Property<int>("LocationVisitsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("location_visits_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationVisitsId"));

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<int>("NumberOfVisits")
                        .HasColumnType("int")
                        .HasColumnName("number_of_visits");

                    b.Property<int>("TouristId")
                        .HasColumnType("int")
                        .HasColumnName("tourist_id");

                    b.HasKey("LocationVisitsId")
                        .HasName("PK__LocationVisits__123456");

                    b.HasIndex("LocationId");

                    b.HasIndex("TouristId");

                    b.ToTable("LocationVisits", (string)null);
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.PublicCityService", b =>
                {
                    b.Property<int>("PublicCityServiceId")
                        .HasColumnType("int")
                        .HasColumnName("public_city_service_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<string>("CoverImage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cover_image");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("PublicCityServiceId")
                        .HasName("PK__PublicCi__AC85DF2F64E031CC");

                    b.HasIndex("CityId");

                    b.ToTable("PublicCityService", (string)null);
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reservation_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"));

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<int?>("TouristId")
                        .HasColumnType("int")
                        .HasColumnName("tourist_id");

                    b.HasKey("ReservationId")
                        .HasName("PK__Reservat__31384C29F8D94933");

                    b.HasIndex(new[] { "LocationId" }, "IX_Reservation_location_id");

                    b.HasIndex(new[] { "TouristId" }, "IX_Reservation_tourist_id");

                    b.ToTable("Reservation", (string)null);
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.ReservationService", b =>
                {
                    b.Property<int>("ReservationServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reservation_service_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationServiceId"));

                    b.Property<string>("AdditionalDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("additional_description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("int")
                        .HasColumnName("number_of_people");

                    b.Property<int>("ReservationId")
                        .HasColumnType("int")
                        .HasColumnName("reservation_id");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.HasKey("ReservationServiceId")
                        .HasName("PK__ReservationService__YourPrimaryKeyName");

                    b.HasIndex("ReservationId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ReservationService", (string)null);
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("review_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<double>("Rate")
                        .HasColumnType("float")
                        .HasColumnName("rate");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("date")
                        .HasColumnName("review_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.Property<int?>("TouristId")
                        .HasColumnType("int")
                        .HasColumnName("tourist_id");

                    b.HasKey("ReviewId")
                        .HasName("PK__Review__60883D90245F288E");

                    b.HasIndex(new[] { "LocationId" }, "IX_Review_location_id");

                    b.HasIndex(new[] { "TouristId" }, "IX_Review_tourist_id");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("service_description");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("service_name");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money")
                        .HasColumnName("unit_price");

                    b.HasKey("ServiceId")
                        .HasName("PK__Service__3E0DB8AFF7BCF2B5");

                    b.HasIndex("LocationId");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.TechnicalIssueOwner", b =>
                {
                    b.Property<int>("TehnicalIssueOwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tehnical_issue_owner_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TehnicalIssueOwnerId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.Property<int?>("TouristAttractionOwnerId")
                        .HasColumnType("int")
                        .HasColumnName("tourist_attraction_owner_id");

                    b.HasKey("TehnicalIssueOwnerId")
                        .HasName("PK__Technica__ADF21CDB7A38475E");

                    b.HasIndex(new[] { "TouristAttractionOwnerId" }, "IX_TechnicalIssue_Owner_tourist_attraction_owner_id");

                    b.ToTable("TechnicalIssue_Owner", (string)null);
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.TechnicalIssueTourist", b =>
                {
                    b.Property<int>("TehnicalIssueTouristId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tehnical_issue_tourist_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TehnicalIssueTouristId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.Property<int?>("TouristId")
                        .HasColumnType("int")
                        .HasColumnName("tourist_id");

                    b.HasKey("TehnicalIssueTouristId")
                        .HasName("PK__Technica__9A1ACC0471B6D537");

                    b.HasIndex(new[] { "LocationId" }, "IX_TechnicalIssue_Tourist_location_id");

                    b.HasIndex(new[] { "TouristId" }, "IX_TechnicalIssue_Tourist_tourist_id");

                    b.ToTable("TechnicalIssue_Tourist", (string)null);
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.Tourist", b =>
                {
                    b.Property<int>("TouristId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tourist_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TouristId"));

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("TouristId")
                        .HasName("PK__Tourist__83DD92C91BDB1850");

                    b.HasIndex(new[] { "UserId" }, "IX_Tourist_user_id");

                    b.ToTable("Tourist", (string)null);
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.TouristAttractionOwner", b =>
                {
                    b.Property<int>("TouristAttractionOwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tourist_attraction_owner_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TouristAttractionOwnerId"));

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("TouristAttractionOwnerId")
                        .HasName("PK__TouristA__3BFDDD96BFD8B586");

                    b.HasIndex(new[] { "UserId" }, "IX_TouristAttractionOwner_user_id");

                    b.ToTable("TouristAttractionOwner", (string)null);
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("password");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("profile_image");

                    b.HasKey("UserId")
                        .HasName("PK__User__B9BE370F7C136D58");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.VisitedLocation", b =>
                {
                    b.Property<int>("VisitedLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("visited_location_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitedLocationId"));

                    b.Property<int?>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("notes");

                    b.Property<int?>("TouristId")
                        .HasColumnType("int")
                        .HasColumnName("tourist_id");

                    b.Property<DateTime?>("VisitDate")
                        .HasColumnType("date")
                        .HasColumnName("visit_date");

                    b.HasKey("VisitedLocationId")
                        .HasName("PK__VisitedL__1D63958280F68D95");

                    b.HasIndex(new[] { "LocationId" }, "IX_VisitedLocation_location_id");

                    b.HasIndex(new[] { "TouristId" }, "IX_VisitedLocation_tourist_id");

                    b.ToTable("VisitedLocation", (string)null);
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.VisitedLocationImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("image_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<int?>("VisitedLocationId")
                        .HasColumnType("int")
                        .HasColumnName("visited_location_id");

                    b.HasKey("ImageId")
                        .HasName("PK__VisitedL__DC9AC95521CC7E9E");

                    b.HasIndex(new[] { "VisitedLocationId" }, "IX_VisitedLocationImage_visited_location_id");

                    b.ToTable("VisitedLocationImage", (string)null);
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.Administrator", b =>
                {
                    b.HasOne("DiscoverHSCountry.Services.Database.User", "User")
                        .WithMany("Administrators")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Administr__user___71D1E811");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.Event", b =>
                {
                    b.HasOne("DiscoverHSCountry.Services.Database.City", "City")
                        .WithMany("Events")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK__Event__city_id__25518C17");

                    b.HasOne("DiscoverHSCountry.Services.Database.EventCategory", "EventCategory")
                        .WithMany("Events")
                        .HasForeignKey("EventCategoryId")
                        .HasConstraintName("FK__Event__event_cat__2645B050");

                    b.Navigation("City");

                    b.Navigation("EventCategory");
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.EventLocation", b =>
                {
                    b.HasOne("DiscoverHSCountry.Services.Database.Event", "Event")
                        .WithOne("EventLocation")
                        .HasForeignKey("DiscoverHSCountry.Services.Database.EventLocation", "EventId")
                        .IsRequired()
                        .HasConstraintName("FK__Event_Loc__event__29221CFB");

                    b.HasOne("DiscoverHSCountry.Services.Database.Location", "Location")
                        .WithMany("EventLocations")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK__Event_Loc__locat__2A164134");

                    b.Navigation("Event");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.HistoricalEvent", b =>
                {
                    b.HasOne("DiscoverHSCountry.Services.Database.City", "City")
                        .WithMany("HistoricalEvents")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK__Historica__city___2CF2ADDF");

                    b.Navigation("City");
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.Location", b =>
                {
                    b.HasOne("DiscoverHSCountry.Services.Database.City", "City")
                        .WithMany("Locations")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK__Location__city_i__02FC7413");

                    b.HasOne("DiscoverHSCountry.Services.Database.LocationCategory", "LocationCategory")
                        .WithMany("Locations")
                        .HasForeignKey("LocationCategoryId")
                        .HasConstraintName("FK__Location__locati__03F0984C");

                    b.HasOne("DiscoverHSCountry.Services.Database.LocationSubcategory", "LocationSubcategory")
                        .WithMany("Locations")
                        .HasForeignKey("LocationSubcategoryId")
                        .HasConstraintName("FK__Location__locati__04E4BC85");

                    b.Navigation("City");

                    b.Navigation("LocationCategory");

                    b.Navigation("LocationSubcategory");
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.LocationImage", b =>
                {
                    b.HasOne("DiscoverHSCountry.Services.Database.Location", "Location")
                        .WithMany("LocationImages")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK__LocationI__locat__0B91BA14");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.LocationSubcategory", b =>
                {
                    b.HasOne("DiscoverHSCountry.Services.Database.LocationCategory", "LocationCategory")
                        .WithMany("LocationSubcategories")
                        .HasForeignKey("LocationCategoryId")
                        .HasConstraintName("FK__LocationS__locat__7E37BEF6");

                    b.Navigation("LocationCategory");
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.LocationTouristAttractionOwner", b =>
                {
                    b.HasOne("DiscoverHSCountry.Services.Database.Location", "Location")
                        .WithMany("LocationTouristAttractionOwners")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK__Location___locat__08B54D69");

                    b.HasOne("DiscoverHSCountry.Services.Database.TouristAttractionOwner", "TouristAttractionOwner")
                        .WithMany("LocationTouristAttractionOwners")
                        .HasForeignKey("TouristAttractionOwnerId")
                        .HasConstraintName("FK__Location___touri__07C12930");

                    b.Navigation("Location");

                    b.Navigation("TouristAttractionOwner");
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.LocationVisits", b =>
                {
                    b.HasOne("DiscoverHSCountry.Services.Database.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LocationVisits_Location");

                    b.HasOne("DiscoverHSCountry.Services.Database.Tourist", "Tourist")
                        .WithMany()
                        .HasForeignKey("TouristId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LocationVisits_Tourist");

                    b.Navigation("Location");

                    b.Navigation("Tourist");
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.PublicCityService", b =>
                {
                    b.HasOne("DiscoverHSCountry.Services.Database.City", "City")
                        .WithMany("PublicCityServices")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK__PublicCit__city___5224328E");

                    b.Navigation("City");
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.Reservation", b =>
                {
                    b.HasOne("DiscoverHSCountry.Services.Database.Location", "Location")
                        .WithMany("Reservations")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK__Reservati__locat__160F4887");

                    b.HasOne("DiscoverHSCountry.Services.Database.Tourist", "Tourist")
                        .WithMany("Reservations")
                        .HasForeignKey("TouristId")
                        .HasConstraintName("FK__Reservati__touri__14270015");

                    b.Navigation("Location");

                    b.Navigation("Tourist");
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.ReservationService", b =>
                {
                    b.HasOne("DiscoverHSCountry.Services.Database.Reservation", "Reservation")
                        .WithMany("ReservationServices")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ReservationService_Reservation");

                    b.HasOne("DiscoverHSCountry.Services.Database.Service", "Service")
                        .WithMany("ReservationServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ReservationService_Service");

                    b.Navigation("Reservation");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.Review", b =>
                {
                    b.HasOne("DiscoverHSCountry.Services.Database.Location", "Location")
                        .WithMany("Reviews")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK__Review__location__208CD6FA");

                    b.HasOne("DiscoverHSCountry.Services.Database.Tourist", "Tourist")
                        .WithMany("Reviews")
                        .HasForeignKey("TouristId")
                        .HasConstraintName("FK__Review__tourist___1F98B2C1");

                    b.Navigation("Location");

                    b.Navigation("Tourist");
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.Service", b =>
                {
                    b.HasOne("DiscoverHSCountry.Services.Database.Location", "Location")
                        .WithMany("Services")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Service_Location");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.TechnicalIssueOwner", b =>
                {
                    b.HasOne("DiscoverHSCountry.Services.Database.TouristAttractionOwner", "TouristAttractionOwner")
                        .WithMany("TechnicalIssueOwners")
                        .HasForeignKey("TouristAttractionOwnerId")
                        .HasConstraintName("FK__Technical__touri__339FAB6E");

                    b.Navigation("TouristAttractionOwner");
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.TechnicalIssueTourist", b =>
                {
                    b.HasOne("DiscoverHSCountry.Services.Database.Location", "Location")
                        .WithMany("TechnicalIssueTourists")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK__Technical__locat__30C33EC3");

                    b.HasOne("DiscoverHSCountry.Services.Database.Tourist", "Tourist")
                        .WithMany("TechnicalIssueTourists")
                        .HasForeignKey("TouristId")
                        .HasConstraintName("FK__Technical__touri__2FCF1A8A");

                    b.Navigation("Location");

                    b.Navigation("Tourist");
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.Tourist", b =>
                {
                    b.HasOne("DiscoverHSCountry.Services.Database.User", "User")
                        .WithMany("Tourists")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Tourist__user_id__778AC167");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.TouristAttractionOwner", b =>
                {
                    b.HasOne("DiscoverHSCountry.Services.Database.User", "User")
                        .WithMany("TouristAttractionOwners")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__TouristAt__user___74AE54BC");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.VisitedLocation", b =>
                {
                    b.HasOne("DiscoverHSCountry.Services.Database.Location", "Location")
                        .WithMany("VisitedLocations")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK__VisitedLo__locat__18EBB532");

                    b.HasOne("DiscoverHSCountry.Services.Database.Tourist", "Tourist")
                        .WithMany("VisitedLocations")
                        .HasForeignKey("TouristId")
                        .HasConstraintName("FK__VisitedLo__touri__19DFD96B");

                    b.Navigation("Location");

                    b.Navigation("Tourist");
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.VisitedLocationImage", b =>
                {
                    b.HasOne("DiscoverHSCountry.Services.Database.VisitedLocation", "VisitedLocation")
                        .WithMany("VisitedLocationImages")
                        .HasForeignKey("VisitedLocationId")
                        .HasConstraintName("FK__VisitedLo__visit__1CBC4616");

                    b.Navigation("VisitedLocation");
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.City", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("HistoricalEvents");

                    b.Navigation("Locations");

                    b.Navigation("PublicCityServices");
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.Event", b =>
                {
                    b.Navigation("EventLocation");
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.EventCategory", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.Location", b =>
                {
                    b.Navigation("EventLocations");

                    b.Navigation("LocationImages");

                    b.Navigation("LocationTouristAttractionOwners");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");

                    b.Navigation("Services");

                    b.Navigation("TechnicalIssueTourists");

                    b.Navigation("VisitedLocations");
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.LocationCategory", b =>
                {
                    b.Navigation("LocationSubcategories");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.LocationSubcategory", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.Reservation", b =>
                {
                    b.Navigation("ReservationServices");
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.Service", b =>
                {
                    b.Navigation("ReservationServices");
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.Tourist", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("Reviews");

                    b.Navigation("TechnicalIssueTourists");

                    b.Navigation("VisitedLocations");
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.TouristAttractionOwner", b =>
                {
                    b.Navigation("LocationTouristAttractionOwners");

                    b.Navigation("TechnicalIssueOwners");
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.User", b =>
                {
                    b.Navigation("Administrators");

                    b.Navigation("TouristAttractionOwners");

                    b.Navigation("Tourists");
                });

            modelBuilder.Entity("DiscoverHSCountry.Services.Database.VisitedLocation", b =>
                {
                    b.Navigation("VisitedLocationImages");
                });
#pragma warning restore 612, 618
        }
    }
}
